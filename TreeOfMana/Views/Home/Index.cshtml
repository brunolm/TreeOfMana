@model TreeOfMana.Models.Home.IndexViewModel
@{
    ViewBag.Title = "Home Page";
}

<div id="tree"></div>

@section scripts
{
    <script type="text/javascript">
        var treeData = {
            @foreach (var item in Model.Skills.Where(o => !o.ParentSkillID.HasValue))
            {
                <text>
            "id": @item.ID,
            "name": "@item.Name",
            "parent": "null",
            "children": [
                @Html.Partial("SkillTreeItemPartial", new { Skills = Model.Skills, Skill = item, Depth = 1 })
            ]
            </text>
            }
        };

        var margin = { top: 20, right: 10, bottom: 20, left: 10 },
            width = 960 - margin.right - margin.left,
            height = 1200 - margin.top - margin.bottom;

        var tree = d3.layout.tree()
            .size([ height, width ]);

        var svg = d3.select("#tree").append("svg")
            .attr("width", width + margin.right + margin.left)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var nodes = tree.nodes(treeData);

        nodes.forEach(function (d) { d.y = d.depth * 220; });

        var link = svg.selectAll(".link")
            .data(tree.links(nodes))
            .enter().append("path")
                .attr("class", "link")
                .attr("d", elbow);

        var node = svg.selectAll(".node")
            .data(nodes)
            .enter().append("g")
                .attr("class", "node")
                .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

        node.append("text")
            .attr("class", "name")
            .attr("x", function(d) { return d.children ? "6" : "10" })
            .attr("y", function(d) { return d.children ? "4" : "4" })
            .attr("fill", "#000")
            //.attr("dy", function(d) { return d.children ? ".35em" : d.dy })
            .text(function(d) { return d.name; });


        function elbow(d, i)
        {
            var id = "computedwith-" + d.target.id;
            var textBlock = $("<span>");
            textBlock
                .addClass(id)
                .text(d.source.name)
                .css("display", "none")
                .appendTo("body");

            var modifier = d.source.children
                ? parseInt(textBlock.width(), 10) + 12
                : 0;

            $("body").remove("." + id);

            return "M" + (d.source.y + modifier) + "," + d.source.x
                 + "H" + d.target.y + "V" + d.target.x
                 + (d.target.children ? "" : "h" + margin.right);
        }


        //update(treeData);

        //function update(source)
        //{
        //    var nodes = tree.nodes(source).reverse(),
        //        links = tree.links(nodes);

        //    nodes.forEach(function (d) { d.y = d.depth * 180; });

        //    var node = svg.selectAll("g.node")
        //      .data(nodes, function (d) { return d.id || (d.id = ++i); });

        //    var nodeEnter = node.enter().append("g")
        //         .attr("class", "node")
        //         .attr("transform", function (d)
        //         {
        //             return "translate(" + d.y + "," + d.x + ")";
        //         });

        //    nodeEnter.append("circle")
        //         .attr("r", 10)
        //         .style("fill", "#fff");

        //    nodeEnter.append("text")
        //        .attr("x", function (d)
        //        {
        //            return d.children || d._children ? 0 : 0;
        //        })
        //        .attr("dy", ".35em")
        //        //.attr("text-anchor", function (d)
        //        //{
        //        //    return d.children || d._children ? "end" : "start";
        //        //})
        //        .text(function (d) { return d.name; })
        //        .style("fill-opacity", 1);

        //    // Links
        //    var link = svg.selectAll("path.link")
        //        .data(links, function (d) { return d.target.id; });

        //    link.enter().insert("path", "g")
        //        .attr("class", "link")
        //        .attr("d", diagonal);

        //}
    </script>
}

<style>
    .link
    {
        fill: none;
        stroke: #ccc;
        stroke-width: 2px;
    }
</style>